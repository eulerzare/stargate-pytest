#
# Autogenerated by Thrift Compiler (0.21.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import (
    TType,
    TMessageType,
    TFrozenDict,
    TException,
    TApplicationException,
)
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport

all_structs = []


class Iface(object):
    def addTrader(self, addTrader):
        """
        Parameters:
         - addTrader

        """
        pass

    def blockTrader(self, blockTrader):
        """
        Parameters:
         - blockTrader

        """
        pass

    def changeTraderFee(self, changeTraderFee):
        """
        Parameters:
         - changeTraderFee

        """
        pass

    def changeTraderMarginMode(self, changeTraderMarginType):
        """
        Parameters:
         - changeTraderMarginType

        """
        pass

    def changeTraderLeverage(self, changeTraderLeverage):
        """
        Parameters:
         - changeTraderLeverage

        """
        pass

    def changeTraderHedgeMode(self, changeTraderHedgeMode):
        """
        Parameters:
         - changeTraderHedgeMode

        """
        pass

    def changeTraderUsdmMultiAssetMode(self, changeTraderUsdmMultiAssetMode):
        """
        Parameters:
         - changeTraderUsdmMultiAssetMode

        """
        pass

    def getTraderAsset(self, getTraderAsset):
        """
        Parameters:
         - getTraderAsset

        """
        pass

    def transferAsset(self, transferAsset):
        """
        Parameters:
         - transferAsset

        """
        pass

    def placeOrder(self, placeOrder):
        """
        Parameters:
         - placeOrder

        """
        pass

    def cancelOrder(self, cancelOrder):
        """
        Parameters:
         - cancelOrder

        """
        pass

    def modifyOrder(self, modifyOrder):
        """
        Parameters:
         - modifyOrder

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def addTrader(self, addTrader):
        """
        Parameters:
         - addTrader

        """
        self.send_addTrader(addTrader)
        return self.recv_addTrader()

    def send_addTrader(self, addTrader):
        self._oprot.writeMessageBegin("addTrader", TMessageType.CALL, self._seqid)
        args = addTrader_args()
        args.addTrader = addTrader
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_addTrader(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = addTrader_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(
            TApplicationException.MISSING_RESULT, "addTrader failed: unknown result"
        )

    def blockTrader(self, blockTrader):
        """
        Parameters:
         - blockTrader

        """
        self.send_blockTrader(blockTrader)
        return self.recv_blockTrader()

    def send_blockTrader(self, blockTrader):
        self._oprot.writeMessageBegin("blockTrader", TMessageType.CALL, self._seqid)
        args = blockTrader_args()
        args.blockTrader = blockTrader
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_blockTrader(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = blockTrader_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(
            TApplicationException.MISSING_RESULT, "blockTrader failed: unknown result"
        )

    def changeTraderFee(self, changeTraderFee):
        """
        Parameters:
         - changeTraderFee

        """
        self.send_changeTraderFee(changeTraderFee)
        return self.recv_changeTraderFee()

    def send_changeTraderFee(self, changeTraderFee):
        self._oprot.writeMessageBegin("changeTraderFee", TMessageType.CALL, self._seqid)
        args = changeTraderFee_args()
        args.changeTraderFee = changeTraderFee
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_changeTraderFee(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = changeTraderFee_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(
            TApplicationException.MISSING_RESULT,
            "changeTraderFee failed: unknown result",
        )

    def changeTraderMarginMode(self, changeTraderMarginType):
        """
        Parameters:
         - changeTraderMarginType

        """
        self.send_changeTraderMarginMode(changeTraderMarginType)
        return self.recv_changeTraderMarginMode()

    def send_changeTraderMarginMode(self, changeTraderMarginType):
        self._oprot.writeMessageBegin(
            "changeTraderMarginMode", TMessageType.CALL, self._seqid
        )
        args = changeTraderMarginMode_args()
        args.changeTraderMarginType = changeTraderMarginType
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_changeTraderMarginMode(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = changeTraderMarginMode_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(
            TApplicationException.MISSING_RESULT,
            "changeTraderMarginMode failed: unknown result",
        )

    def changeTraderLeverage(self, changeTraderLeverage):
        """
        Parameters:
         - changeTraderLeverage

        """
        self.send_changeTraderLeverage(changeTraderLeverage)
        return self.recv_changeTraderLeverage()

    def send_changeTraderLeverage(self, changeTraderLeverage):
        self._oprot.writeMessageBegin(
            "changeTraderLeverage", TMessageType.CALL, self._seqid
        )
        args = changeTraderLeverage_args()
        args.changeTraderLeverage = changeTraderLeverage
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_changeTraderLeverage(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = changeTraderLeverage_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(
            TApplicationException.MISSING_RESULT,
            "changeTraderLeverage failed: unknown result",
        )

    def changeTraderHedgeMode(self, changeTraderHedgeMode):
        """
        Parameters:
         - changeTraderHedgeMode

        """
        self.send_changeTraderHedgeMode(changeTraderHedgeMode)
        return self.recv_changeTraderHedgeMode()

    def send_changeTraderHedgeMode(self, changeTraderHedgeMode):
        self._oprot.writeMessageBegin(
            "changeTraderHedgeMode", TMessageType.CALL, self._seqid
        )
        args = changeTraderHedgeMode_args()
        args.changeTraderHedgeMode = changeTraderHedgeMode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_changeTraderHedgeMode(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = changeTraderHedgeMode_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(
            TApplicationException.MISSING_RESULT,
            "changeTraderHedgeMode failed: unknown result",
        )

    def changeTraderUsdmMultiAssetMode(self, changeTraderUsdmMultiAssetMode):
        """
        Parameters:
         - changeTraderUsdmMultiAssetMode

        """
        self.send_changeTraderUsdmMultiAssetMode(changeTraderUsdmMultiAssetMode)
        return self.recv_changeTraderUsdmMultiAssetMode()

    def send_changeTraderUsdmMultiAssetMode(self, changeTraderUsdmMultiAssetMode):
        self._oprot.writeMessageBegin(
            "changeTraderUsdmMultiAssetMode", TMessageType.CALL, self._seqid
        )
        args = changeTraderUsdmMultiAssetMode_args()
        args.changeTraderUsdmMultiAssetMode = changeTraderUsdmMultiAssetMode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_changeTraderUsdmMultiAssetMode(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = changeTraderUsdmMultiAssetMode_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(
            TApplicationException.MISSING_RESULT,
            "changeTraderUsdmMultiAssetMode failed: unknown result",
        )

    def getTraderAsset(self, getTraderAsset):
        """
        Parameters:
         - getTraderAsset

        """
        self.send_getTraderAsset(getTraderAsset)
        return self.recv_getTraderAsset()

    def send_getTraderAsset(self, getTraderAsset):
        self._oprot.writeMessageBegin("getTraderAsset", TMessageType.CALL, self._seqid)
        args = getTraderAsset_args()
        args.getTraderAsset = getTraderAsset
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getTraderAsset(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getTraderAsset_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(
            TApplicationException.MISSING_RESULT,
            "getTraderAsset failed: unknown result",
        )

    def transferAsset(self, transferAsset):
        """
        Parameters:
         - transferAsset

        """
        self.send_transferAsset(transferAsset)
        return self.recv_transferAsset()

    def send_transferAsset(self, transferAsset):
        self._oprot.writeMessageBegin("transferAsset", TMessageType.CALL, self._seqid)
        args = transferAsset_args()
        args.transferAsset = transferAsset
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_transferAsset(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = transferAsset_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(
            TApplicationException.MISSING_RESULT, "transferAsset failed: unknown result"
        )

    def placeOrder(self, placeOrder):
        """
        Parameters:
         - placeOrder

        """
        self.send_placeOrder(placeOrder)
        return self.recv_placeOrder()

    def send_placeOrder(self, placeOrder):
        self._oprot.writeMessageBegin("placeOrder", TMessageType.CALL, self._seqid)
        args = placeOrder_args()
        args.placeOrder = placeOrder
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_placeOrder(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = placeOrder_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(
            TApplicationException.MISSING_RESULT, "placeOrder failed: unknown result"
        )

    def cancelOrder(self, cancelOrder):
        """
        Parameters:
         - cancelOrder

        """
        self.send_cancelOrder(cancelOrder)
        return self.recv_cancelOrder()

    def send_cancelOrder(self, cancelOrder):
        self._oprot.writeMessageBegin("cancelOrder", TMessageType.CALL, self._seqid)
        args = cancelOrder_args()
        args.cancelOrder = cancelOrder
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_cancelOrder(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = cancelOrder_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(
            TApplicationException.MISSING_RESULT, "cancelOrder failed: unknown result"
        )

    def modifyOrder(self, modifyOrder):
        """
        Parameters:
         - modifyOrder

        """
        self.send_modifyOrder(modifyOrder)
        return self.recv_modifyOrder()

    def send_modifyOrder(self, modifyOrder):
        self._oprot.writeMessageBegin("modifyOrder", TMessageType.CALL, self._seqid)
        args = modifyOrder_args()
        args.modifyOrder = modifyOrder
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_modifyOrder(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = modifyOrder_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(
            TApplicationException.MISSING_RESULT, "modifyOrder failed: unknown result"
        )


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["addTrader"] = Processor.process_addTrader
        self._processMap["blockTrader"] = Processor.process_blockTrader
        self._processMap["changeTraderFee"] = Processor.process_changeTraderFee
        self._processMap["changeTraderMarginMode"] = (
            Processor.process_changeTraderMarginMode
        )
        self._processMap["changeTraderLeverage"] = (
            Processor.process_changeTraderLeverage
        )
        self._processMap["changeTraderHedgeMode"] = (
            Processor.process_changeTraderHedgeMode
        )
        self._processMap["changeTraderUsdmMultiAssetMode"] = (
            Processor.process_changeTraderUsdmMultiAssetMode
        )
        self._processMap["getTraderAsset"] = Processor.process_getTraderAsset
        self._processMap["transferAsset"] = Processor.process_transferAsset
        self._processMap["placeOrder"] = Processor.process_placeOrder
        self._processMap["cancelOrder"] = Processor.process_cancelOrder
        self._processMap["modifyOrder"] = Processor.process_modifyOrder
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(
                TApplicationException.UNKNOWN_METHOD, "Unknown function %s" % (name)
            )
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_addTrader(self, seqid, iprot, oprot):
        args = addTrader_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = addTrader_result()
        try:
            result.success = self._handler.addTrader(args.addTrader)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception("TApplication exception in handler")
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception("Unexpected exception in handler")
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(
                TApplicationException.INTERNAL_ERROR, "Internal error"
            )
        oprot.writeMessageBegin("addTrader", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_blockTrader(self, seqid, iprot, oprot):
        args = blockTrader_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = blockTrader_result()
        try:
            result.success = self._handler.blockTrader(args.blockTrader)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception("TApplication exception in handler")
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception("Unexpected exception in handler")
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(
                TApplicationException.INTERNAL_ERROR, "Internal error"
            )
        oprot.writeMessageBegin("blockTrader", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_changeTraderFee(self, seqid, iprot, oprot):
        args = changeTraderFee_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = changeTraderFee_result()
        try:
            result.success = self._handler.changeTraderFee(args.changeTraderFee)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception("TApplication exception in handler")
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception("Unexpected exception in handler")
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(
                TApplicationException.INTERNAL_ERROR, "Internal error"
            )
        oprot.writeMessageBegin("changeTraderFee", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_changeTraderMarginMode(self, seqid, iprot, oprot):
        args = changeTraderMarginMode_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = changeTraderMarginMode_result()
        try:
            result.success = self._handler.changeTraderMarginMode(
                args.changeTraderMarginType
            )
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception("TApplication exception in handler")
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception("Unexpected exception in handler")
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(
                TApplicationException.INTERNAL_ERROR, "Internal error"
            )
        oprot.writeMessageBegin("changeTraderMarginMode", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_changeTraderLeverage(self, seqid, iprot, oprot):
        args = changeTraderLeverage_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = changeTraderLeverage_result()
        try:
            result.success = self._handler.changeTraderLeverage(
                args.changeTraderLeverage
            )
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception("TApplication exception in handler")
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception("Unexpected exception in handler")
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(
                TApplicationException.INTERNAL_ERROR, "Internal error"
            )
        oprot.writeMessageBegin("changeTraderLeverage", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_changeTraderHedgeMode(self, seqid, iprot, oprot):
        args = changeTraderHedgeMode_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = changeTraderHedgeMode_result()
        try:
            result.success = self._handler.changeTraderHedgeMode(
                args.changeTraderHedgeMode
            )
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception("TApplication exception in handler")
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception("Unexpected exception in handler")
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(
                TApplicationException.INTERNAL_ERROR, "Internal error"
            )
        oprot.writeMessageBegin("changeTraderHedgeMode", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_changeTraderUsdmMultiAssetMode(self, seqid, iprot, oprot):
        args = changeTraderUsdmMultiAssetMode_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = changeTraderUsdmMultiAssetMode_result()
        try:
            result.success = self._handler.changeTraderUsdmMultiAssetMode(
                args.changeTraderUsdmMultiAssetMode
            )
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception("TApplication exception in handler")
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception("Unexpected exception in handler")
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(
                TApplicationException.INTERNAL_ERROR, "Internal error"
            )
        oprot.writeMessageBegin("changeTraderUsdmMultiAssetMode", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getTraderAsset(self, seqid, iprot, oprot):
        args = getTraderAsset_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getTraderAsset_result()
        try:
            result.success = self._handler.getTraderAsset(args.getTraderAsset)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception("TApplication exception in handler")
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception("Unexpected exception in handler")
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(
                TApplicationException.INTERNAL_ERROR, "Internal error"
            )
        oprot.writeMessageBegin("getTraderAsset", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_transferAsset(self, seqid, iprot, oprot):
        args = transferAsset_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = transferAsset_result()
        try:
            result.success = self._handler.transferAsset(args.transferAsset)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception("TApplication exception in handler")
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception("Unexpected exception in handler")
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(
                TApplicationException.INTERNAL_ERROR, "Internal error"
            )
        oprot.writeMessageBegin("transferAsset", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_placeOrder(self, seqid, iprot, oprot):
        args = placeOrder_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = placeOrder_result()
        try:
            result.success = self._handler.placeOrder(args.placeOrder)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception("TApplication exception in handler")
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception("Unexpected exception in handler")
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(
                TApplicationException.INTERNAL_ERROR, "Internal error"
            )
        oprot.writeMessageBegin("placeOrder", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_cancelOrder(self, seqid, iprot, oprot):
        args = cancelOrder_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = cancelOrder_result()
        try:
            result.success = self._handler.cancelOrder(args.cancelOrder)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception("TApplication exception in handler")
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception("Unexpected exception in handler")
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(
                TApplicationException.INTERNAL_ERROR, "Internal error"
            )
        oprot.writeMessageBegin("cancelOrder", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_modifyOrder(self, seqid, iprot, oprot):
        args = modifyOrder_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = modifyOrder_result()
        try:
            result.success = self._handler.modifyOrder(args.modifyOrder)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception("TApplication exception in handler")
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception("Unexpected exception in handler")
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(
                TApplicationException.INTERNAL_ERROR, "Internal error"
            )
        oprot.writeMessageBegin("modifyOrder", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES


class addTrader_args(object):
    """
    Attributes:
     - addTrader

    """

    def __init__(
        self,
        addTrader=None,
    ):
        self.addTrader = addTrader

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.addTrader = AddTrader()
                    self.addTrader.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("addTrader_args")
        if self.addTrader is not None:
            oprot.writeFieldBegin("addTrader", TType.STRUCT, 1)
            self.addTrader.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


all_structs.append(addTrader_args)
addTrader_args.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRUCT,
        "addTrader",
        [AddTrader, None],
        None,
    ),  # 1
)


class addTrader_result(object):
    """
    Attributes:
     - success

    """

    def __init__(
        self,
        success=None,
    ):
        self.success = success

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TraderResponse()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("addTrader_result")
        if self.success is not None:
            oprot.writeFieldBegin("success", TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


all_structs.append(addTrader_result)
addTrader_result.thrift_spec = (
    (
        0,
        TType.STRUCT,
        "success",
        [TraderResponse, None],
        None,
    ),  # 0
)


class blockTrader_args(object):
    """
    Attributes:
     - blockTrader

    """

    def __init__(
        self,
        blockTrader=None,
    ):
        self.blockTrader = blockTrader

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.blockTrader = BlockTrader()
                    self.blockTrader.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("blockTrader_args")
        if self.blockTrader is not None:
            oprot.writeFieldBegin("blockTrader", TType.STRUCT, 1)
            self.blockTrader.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


all_structs.append(blockTrader_args)
blockTrader_args.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRUCT,
        "blockTrader",
        [BlockTrader, None],
        None,
    ),  # 1
)


class blockTrader_result(object):
    """
    Attributes:
     - success

    """

    def __init__(
        self,
        success=None,
    ):
        self.success = success

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TraderResponse()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("blockTrader_result")
        if self.success is not None:
            oprot.writeFieldBegin("success", TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


all_structs.append(blockTrader_result)
blockTrader_result.thrift_spec = (
    (
        0,
        TType.STRUCT,
        "success",
        [TraderResponse, None],
        None,
    ),  # 0
)


class changeTraderFee_args(object):
    """
    Attributes:
     - changeTraderFee

    """

    def __init__(
        self,
        changeTraderFee=None,
    ):
        self.changeTraderFee = changeTraderFee

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.changeTraderFee = ChangeTraderFee()
                    self.changeTraderFee.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("changeTraderFee_args")
        if self.changeTraderFee is not None:
            oprot.writeFieldBegin("changeTraderFee", TType.STRUCT, 1)
            self.changeTraderFee.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


all_structs.append(changeTraderFee_args)
changeTraderFee_args.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRUCT,
        "changeTraderFee",
        [ChangeTraderFee, None],
        None,
    ),  # 1
)


class changeTraderFee_result(object):
    """
    Attributes:
     - success

    """

    def __init__(
        self,
        success=None,
    ):
        self.success = success

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TraderResponse()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("changeTraderFee_result")
        if self.success is not None:
            oprot.writeFieldBegin("success", TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


all_structs.append(changeTraderFee_result)
changeTraderFee_result.thrift_spec = (
    (
        0,
        TType.STRUCT,
        "success",
        [TraderResponse, None],
        None,
    ),  # 0
)


class changeTraderMarginMode_args(object):
    """
    Attributes:
     - changeTraderMarginType

    """

    def __init__(
        self,
        changeTraderMarginType=None,
    ):
        self.changeTraderMarginType = changeTraderMarginType

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.changeTraderMarginType = ChangeTraderMarginMode()
                    self.changeTraderMarginType.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("changeTraderMarginMode_args")
        if self.changeTraderMarginType is not None:
            oprot.writeFieldBegin("changeTraderMarginType", TType.STRUCT, 1)
            self.changeTraderMarginType.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


all_structs.append(changeTraderMarginMode_args)
changeTraderMarginMode_args.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRUCT,
        "changeTraderMarginType",
        [ChangeTraderMarginMode, None],
        None,
    ),  # 1
)


class changeTraderMarginMode_result(object):
    """
    Attributes:
     - success

    """

    def __init__(
        self,
        success=None,
    ):
        self.success = success

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = stargate_thrift_classes.base.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("changeTraderMarginMode_result")
        if self.success is not None:
            oprot.writeFieldBegin("success", TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


all_structs.append(changeTraderMarginMode_result)
changeTraderMarginMode_result.thrift_spec = (
    (
        0,
        TType.STRUCT,
        "success",
        [stargate_thrift_classes.base.ttypes.Response, None],
        None,
    ),  # 0
)


class changeTraderLeverage_args(object):
    """
    Attributes:
     - changeTraderLeverage

    """

    def __init__(
        self,
        changeTraderLeverage=None,
    ):
        self.changeTraderLeverage = changeTraderLeverage

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.changeTraderLeverage = ChangeTraderLeverage()
                    self.changeTraderLeverage.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("changeTraderLeverage_args")
        if self.changeTraderLeverage is not None:
            oprot.writeFieldBegin("changeTraderLeverage", TType.STRUCT, 1)
            self.changeTraderLeverage.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


all_structs.append(changeTraderLeverage_args)
changeTraderLeverage_args.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRUCT,
        "changeTraderLeverage",
        [ChangeTraderLeverage, None],
        None,
    ),  # 1
)


class changeTraderLeverage_result(object):
    """
    Attributes:
     - success

    """

    def __init__(
        self,
        success=None,
    ):
        self.success = success

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = stargate_thrift_classes.base.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("changeTraderLeverage_result")
        if self.success is not None:
            oprot.writeFieldBegin("success", TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


all_structs.append(changeTraderLeverage_result)
changeTraderLeverage_result.thrift_spec = (
    (
        0,
        TType.STRUCT,
        "success",
        [stargate_thrift_classes.base.ttypes.Response, None],
        None,
    ),  # 0
)


class changeTraderHedgeMode_args(object):
    """
    Attributes:
     - changeTraderHedgeMode

    """

    def __init__(
        self,
        changeTraderHedgeMode=None,
    ):
        self.changeTraderHedgeMode = changeTraderHedgeMode

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.changeTraderHedgeMode = ChangeTraderHedgeMode()
                    self.changeTraderHedgeMode.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("changeTraderHedgeMode_args")
        if self.changeTraderHedgeMode is not None:
            oprot.writeFieldBegin("changeTraderHedgeMode", TType.STRUCT, 1)
            self.changeTraderHedgeMode.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


all_structs.append(changeTraderHedgeMode_args)
changeTraderHedgeMode_args.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRUCT,
        "changeTraderHedgeMode",
        [ChangeTraderHedgeMode, None],
        None,
    ),  # 1
)


class changeTraderHedgeMode_result(object):
    """
    Attributes:
     - success

    """

    def __init__(
        self,
        success=None,
    ):
        self.success = success

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TraderResponse()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("changeTraderHedgeMode_result")
        if self.success is not None:
            oprot.writeFieldBegin("success", TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


all_structs.append(changeTraderHedgeMode_result)
changeTraderHedgeMode_result.thrift_spec = (
    (
        0,
        TType.STRUCT,
        "success",
        [TraderResponse, None],
        None,
    ),  # 0
)


class changeTraderUsdmMultiAssetMode_args(object):
    """
    Attributes:
     - changeTraderUsdmMultiAssetMode

    """

    def __init__(
        self,
        changeTraderUsdmMultiAssetMode=None,
    ):
        self.changeTraderUsdmMultiAssetMode = changeTraderUsdmMultiAssetMode

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.changeTraderUsdmMultiAssetMode = (
                        ChangeTraderUsdmMultiAssetMode()
                    )
                    self.changeTraderUsdmMultiAssetMode.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("changeTraderUsdmMultiAssetMode_args")
        if self.changeTraderUsdmMultiAssetMode is not None:
            oprot.writeFieldBegin("changeTraderUsdmMultiAssetMode", TType.STRUCT, 1)
            self.changeTraderUsdmMultiAssetMode.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


all_structs.append(changeTraderUsdmMultiAssetMode_args)
changeTraderUsdmMultiAssetMode_args.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRUCT,
        "changeTraderUsdmMultiAssetMode",
        [ChangeTraderUsdmMultiAssetMode, None],
        None,
    ),  # 1
)


class changeTraderUsdmMultiAssetMode_result(object):
    """
    Attributes:
     - success

    """

    def __init__(
        self,
        success=None,
    ):
        self.success = success

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TraderResponse()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("changeTraderUsdmMultiAssetMode_result")
        if self.success is not None:
            oprot.writeFieldBegin("success", TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


all_structs.append(changeTraderUsdmMultiAssetMode_result)
changeTraderUsdmMultiAssetMode_result.thrift_spec = (
    (
        0,
        TType.STRUCT,
        "success",
        [TraderResponse, None],
        None,
    ),  # 0
)


class getTraderAsset_args(object):
    """
    Attributes:
     - getTraderAsset

    """

    def __init__(
        self,
        getTraderAsset=None,
    ):
        self.getTraderAsset = getTraderAsset

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.getTraderAsset = GetTraderAsset()
                    self.getTraderAsset.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("getTraderAsset_args")
        if self.getTraderAsset is not None:
            oprot.writeFieldBegin("getTraderAsset", TType.STRUCT, 1)
            self.getTraderAsset.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


all_structs.append(getTraderAsset_args)
getTraderAsset_args.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRUCT,
        "getTraderAsset",
        [GetTraderAsset, None],
        None,
    ),  # 1
)


class getTraderAsset_result(object):
    """
    Attributes:
     - success

    """

    def __init__(
        self,
        success=None,
    ):
        self.success = success

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TraderAssetResponse()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("getTraderAsset_result")
        if self.success is not None:
            oprot.writeFieldBegin("success", TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


all_structs.append(getTraderAsset_result)
getTraderAsset_result.thrift_spec = (
    (
        0,
        TType.STRUCT,
        "success",
        [TraderAssetResponse, None],
        None,
    ),  # 0
)


class transferAsset_args(object):
    """
    Attributes:
     - transferAsset

    """

    def __init__(
        self,
        transferAsset=None,
    ):
        self.transferAsset = transferAsset

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.transferAsset = TransferAsset()
                    self.transferAsset.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("transferAsset_args")
        if self.transferAsset is not None:
            oprot.writeFieldBegin("transferAsset", TType.STRUCT, 1)
            self.transferAsset.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


all_structs.append(transferAsset_args)
transferAsset_args.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRUCT,
        "transferAsset",
        [TransferAsset, None],
        None,
    ),  # 1
)


class transferAsset_result(object):
    """
    Attributes:
     - success

    """

    def __init__(
        self,
        success=None,
    ):
        self.success = success

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TransferAssetResponse()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("transferAsset_result")
        if self.success is not None:
            oprot.writeFieldBegin("success", TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


all_structs.append(transferAsset_result)
transferAsset_result.thrift_spec = (
    (
        0,
        TType.STRUCT,
        "success",
        [TransferAssetResponse, None],
        None,
    ),  # 0
)


class placeOrder_args(object):
    """
    Attributes:
     - placeOrder

    """

    def __init__(
        self,
        placeOrder=None,
    ):
        self.placeOrder = placeOrder

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.placeOrder = PlaceOrder()
                    self.placeOrder.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("placeOrder_args")
        if self.placeOrder is not None:
            oprot.writeFieldBegin("placeOrder", TType.STRUCT, 1)
            self.placeOrder.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


all_structs.append(placeOrder_args)
placeOrder_args.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRUCT,
        "placeOrder",
        [PlaceOrder, None],
        None,
    ),  # 1
)


class placeOrder_result(object):
    """
    Attributes:
     - success

    """

    def __init__(
        self,
        success=None,
    ):
        self.success = success

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = stargate_thrift_classes.base.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("placeOrder_result")
        if self.success is not None:
            oprot.writeFieldBegin("success", TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


all_structs.append(placeOrder_result)
placeOrder_result.thrift_spec = (
    (
        0,
        TType.STRUCT,
        "success",
        [stargate_thrift_classes.base.ttypes.Response, None],
        None,
    ),  # 0
)


class cancelOrder_args(object):
    """
    Attributes:
     - cancelOrder

    """

    def __init__(
        self,
        cancelOrder=None,
    ):
        self.cancelOrder = cancelOrder

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.cancelOrder = CancelOrder()
                    self.cancelOrder.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("cancelOrder_args")
        if self.cancelOrder is not None:
            oprot.writeFieldBegin("cancelOrder", TType.STRUCT, 1)
            self.cancelOrder.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


all_structs.append(cancelOrder_args)
cancelOrder_args.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRUCT,
        "cancelOrder",
        [CancelOrder, None],
        None,
    ),  # 1
)


class cancelOrder_result(object):
    """
    Attributes:
     - success

    """

    def __init__(
        self,
        success=None,
    ):
        self.success = success

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = stargate_thrift_classes.base.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("cancelOrder_result")
        if self.success is not None:
            oprot.writeFieldBegin("success", TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


all_structs.append(cancelOrder_result)
cancelOrder_result.thrift_spec = (
    (
        0,
        TType.STRUCT,
        "success",
        [stargate_thrift_classes.base.ttypes.Response, None],
        None,
    ),  # 0
)


class modifyOrder_args(object):
    """
    Attributes:
     - modifyOrder

    """

    def __init__(
        self,
        modifyOrder=None,
    ):
        self.modifyOrder = modifyOrder

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.modifyOrder = ModifyOrder()
                    self.modifyOrder.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("modifyOrder_args")
        if self.modifyOrder is not None:
            oprot.writeFieldBegin("modifyOrder", TType.STRUCT, 1)
            self.modifyOrder.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


all_structs.append(modifyOrder_args)
modifyOrder_args.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRUCT,
        "modifyOrder",
        [ModifyOrder, None],
        None,
    ),  # 1
)


class modifyOrder_result(object):
    """
    Attributes:
     - success

    """

    def __init__(
        self,
        success=None,
    ):
        self.success = success

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = stargate_thrift_classes.base.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("modifyOrder_result")
        if self.success is not None:
            oprot.writeFieldBegin("success", TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


all_structs.append(modifyOrder_result)
modifyOrder_result.thrift_spec = (
    (
        0,
        TType.STRUCT,
        "success",
        [stargate_thrift_classes.base.ttypes.Response, None],
        None,
    ),  # 0
)
fix_spec(all_structs)
del all_structs
