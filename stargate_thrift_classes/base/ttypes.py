#
# Autogenerated by Thrift Compiler (0.21.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import (
    TType,
    TMessageType,
    TFrozenDict,
    TException,
    TApplicationException,
)
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport

all_structs = []


class MarketType(object):
    PERPETUAL_USDM = 1
    PERPETUAL_COINM = 2

    _VALUES_TO_NAMES = {
        1: "PERPETUAL_USDM",
        2: "PERPETUAL_COINM",
    }

    _NAMES_TO_VALUES = {
        "PERPETUAL_USDM": 1,
        "PERPETUAL_COINM": 2,
    }


class OrderType(object):
    LIMIT = 1

    _VALUES_TO_NAMES = {
        1: "LIMIT",
    }

    _NAMES_TO_VALUES = {
        "LIMIT": 1,
    }


class OrderSide(object):
    BID = 1
    ASK = 2

    _VALUES_TO_NAMES = {
        1: "BID",
        2: "ASK",
    }

    _NAMES_TO_VALUES = {
        "BID": 1,
        "ASK": 2,
    }


class Empty(object):

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("Empty")
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Response(object):
    """
    Attributes:
     - status
     - message
     - sequence

    """

    def __init__(
        self,
        status=None,
        message=None,
        sequence=None,
    ):
        self.status = status
        self.message = message
        self.sequence = sequence

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.sequence = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("Response")
        if self.status is not None:
            oprot.writeFieldBegin("status", TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin("message", TType.STRING, 2)
            oprot.writeString(
                self.message.encode("utf-8")
                if sys.version_info[0] == 2
                else self.message
            )
            oprot.writeFieldEnd()
        if self.sequence is not None:
            oprot.writeFieldBegin("sequence", TType.I64, 3)
            oprot.writeI64(self.sequence)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Currency(object):
    """
    Attributes:
     - id
     - symbol
     - scale

    """

    def __init__(
        self,
        id=None,
        symbol=None,
        scale=None,
    ):
        self.id = id
        self.symbol = symbol
        self.scale = scale

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.id = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.symbol = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.scale = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("Currency")
        if self.id is not None:
            oprot.writeFieldBegin("id", TType.I16, 1)
            oprot.writeI16(self.id)
            oprot.writeFieldEnd()
        if self.symbol is not None:
            oprot.writeFieldBegin("symbol", TType.STRING, 2)
            oprot.writeString(
                self.symbol.encode("utf-8") if sys.version_info[0] == 2 else self.symbol
            )
            oprot.writeFieldEnd()
        if self.scale is not None:
            oprot.writeFieldBegin("scale", TType.I32, 3)
            oprot.writeI32(self.scale)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.id is None:
            raise TProtocolException(message="Required field id is unset!")
        if self.symbol is None:
            raise TProtocolException(message="Required field symbol is unset!")
        if self.scale is None:
            raise TProtocolException(message="Required field scale is unset!")
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Asset(object):
    """
    Attributes:
     - traderId
     - marketType
     - currencyId
     - balance

    """

    def __init__(
        self,
        traderId=None,
        marketType=None,
        currencyId=None,
        balance=None,
    ):
        self.traderId = traderId
        self.marketType = marketType
        self.currencyId = currencyId
        self.balance = balance

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.traderId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.marketType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.currencyId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.balance = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("Asset")
        if self.traderId is not None:
            oprot.writeFieldBegin("traderId", TType.I64, 1)
            oprot.writeI64(self.traderId)
            oprot.writeFieldEnd()
        if self.marketType is not None:
            oprot.writeFieldBegin("marketType", TType.I32, 2)
            oprot.writeI32(self.marketType)
            oprot.writeFieldEnd()
        if self.currencyId is not None:
            oprot.writeFieldBegin("currencyId", TType.I16, 3)
            oprot.writeI16(self.currencyId)
            oprot.writeFieldEnd()
        if self.balance is not None:
            oprot.writeFieldBegin("balance", TType.STRING, 4)
            oprot.writeString(
                self.balance.encode("utf-8")
                if sys.version_info[0] == 2
                else self.balance
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.traderId is None:
            raise TProtocolException(message="Required field traderId is unset!")
        if self.marketType is None:
            raise TProtocolException(message="Required field marketType is unset!")
        if self.currencyId is None:
            raise TProtocolException(message="Required field currencyId is unset!")
        if self.balance is None:
            raise TProtocolException(message="Required field balance is unset!")
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Contract(object):
    """
    Attributes:
     - id
     - name
     - marketType
     - baseCurrencyId
     - quoteCurrencyId
     - settlementCurrencyId
     - baseScale
     - quoteScale

    """

    def __init__(
        self,
        id=None,
        name=None,
        marketType=None,
        baseCurrencyId=None,
        quoteCurrencyId=None,
        settlementCurrencyId=None,
        baseScale=None,
        quoteScale=None,
    ):
        self.id = id
        self.name = name
        self.marketType = marketType
        self.baseCurrencyId = baseCurrencyId
        self.quoteCurrencyId = quoteCurrencyId
        self.settlementCurrencyId = settlementCurrencyId
        self.baseScale = baseScale
        self.quoteScale = quoteScale

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.id = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.marketType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I16:
                    self.baseCurrencyId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I16:
                    self.quoteCurrencyId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I16:
                    self.settlementCurrencyId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.baseScale = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.quoteScale = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("Contract")
        if self.id is not None:
            oprot.writeFieldBegin("id", TType.I16, 1)
            oprot.writeI16(self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin("name", TType.STRING, 2)
            oprot.writeString(
                self.name.encode("utf-8") if sys.version_info[0] == 2 else self.name
            )
            oprot.writeFieldEnd()
        if self.marketType is not None:
            oprot.writeFieldBegin("marketType", TType.I32, 3)
            oprot.writeI32(self.marketType)
            oprot.writeFieldEnd()
        if self.baseCurrencyId is not None:
            oprot.writeFieldBegin("baseCurrencyId", TType.I16, 4)
            oprot.writeI16(self.baseCurrencyId)
            oprot.writeFieldEnd()
        if self.quoteCurrencyId is not None:
            oprot.writeFieldBegin("quoteCurrencyId", TType.I16, 5)
            oprot.writeI16(self.quoteCurrencyId)
            oprot.writeFieldEnd()
        if self.settlementCurrencyId is not None:
            oprot.writeFieldBegin("settlementCurrencyId", TType.I16, 6)
            oprot.writeI16(self.settlementCurrencyId)
            oprot.writeFieldEnd()
        if self.baseScale is not None:
            oprot.writeFieldBegin("baseScale", TType.I32, 7)
            oprot.writeI32(self.baseScale)
            oprot.writeFieldEnd()
        if self.quoteScale is not None:
            oprot.writeFieldBegin("quoteScale", TType.I32, 8)
            oprot.writeI32(self.quoteScale)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.id is None:
            raise TProtocolException(message="Required field id is unset!")
        if self.name is None:
            raise TProtocolException(message="Required field name is unset!")
        if self.marketType is None:
            raise TProtocolException(message="Required field marketType is unset!")
        if self.baseCurrencyId is None:
            raise TProtocolException(message="Required field baseCurrencyId is unset!")
        if self.quoteCurrencyId is None:
            raise TProtocolException(message="Required field quoteCurrencyId is unset!")
        if self.settlementCurrencyId is None:
            raise TProtocolException(
                message="Required field settlementCurrencyId is unset!"
            )
        if self.baseScale is None:
            raise TProtocolException(message="Required field baseScale is unset!")
        if self.quoteScale is None:
            raise TProtocolException(message="Required field quoteScale is unset!")
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Trader(object):
    """
    Attributes:
     - id
     - active

    """

    def __init__(
        self,
        id=None,
        active=None,
    ):
        self.id = id
        self.active = active

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.active = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("Trader")
        if self.id is not None:
            oprot.writeFieldBegin("id", TType.I64, 1)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.active is not None:
            oprot.writeFieldBegin("active", TType.BOOL, 2)
            oprot.writeBool(self.active)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.id is None:
            raise TProtocolException(message="Required field id is unset!")
        if self.active is None:
            raise TProtocolException(message="Required field active is unset!")
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


all_structs.append(Empty)
Empty.thrift_spec = ()
all_structs.append(Response)
Response.thrift_spec = (
    None,  # 0
    (
        1,
        TType.I32,
        "status",
        None,
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "message",
        "UTF8",
        None,
    ),  # 2
    (
        3,
        TType.I64,
        "sequence",
        None,
        None,
    ),  # 3
)
all_structs.append(Currency)
Currency.thrift_spec = (
    None,  # 0
    (
        1,
        TType.I16,
        "id",
        None,
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "symbol",
        "UTF8",
        None,
    ),  # 2
    (
        3,
        TType.I32,
        "scale",
        None,
        None,
    ),  # 3
)
all_structs.append(Asset)
Asset.thrift_spec = (
    None,  # 0
    (
        1,
        TType.I64,
        "traderId",
        None,
        None,
    ),  # 1
    (
        2,
        TType.I32,
        "marketType",
        None,
        None,
    ),  # 2
    (
        3,
        TType.I16,
        "currencyId",
        None,
        None,
    ),  # 3
    (
        4,
        TType.STRING,
        "balance",
        "UTF8",
        None,
    ),  # 4
)
all_structs.append(Contract)
Contract.thrift_spec = (
    None,  # 0
    (
        1,
        TType.I16,
        "id",
        None,
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "name",
        "UTF8",
        None,
    ),  # 2
    (
        3,
        TType.I32,
        "marketType",
        None,
        None,
    ),  # 3
    (
        4,
        TType.I16,
        "baseCurrencyId",
        None,
        None,
    ),  # 4
    (
        5,
        TType.I16,
        "quoteCurrencyId",
        None,
        None,
    ),  # 5
    (
        6,
        TType.I16,
        "settlementCurrencyId",
        None,
        None,
    ),  # 6
    (
        7,
        TType.I32,
        "baseScale",
        None,
        None,
    ),  # 7
    (
        8,
        TType.I32,
        "quoteScale",
        None,
        None,
    ),  # 8
)
all_structs.append(Trader)
Trader.thrift_spec = (
    None,  # 0
    (
        1,
        TType.I64,
        "id",
        None,
        None,
    ),  # 1
    (
        2,
        TType.BOOL,
        "active",
        None,
        None,
    ),  # 2
)
fix_spec(all_structs)
del all_structs
