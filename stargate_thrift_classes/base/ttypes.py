#
# Autogenerated by Thrift Compiler (0.21.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import (
    TType,
    TMessageType,
    TFrozenDict,
    TException,
    TApplicationException,
)
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport

all_structs = []


class MarketType(object):
    PERPETUAL_USDM = 1
    PERPETUAL_COINM = 2

    _VALUES_TO_NAMES = {
        1: "PERPETUAL_USDM",
        2: "PERPETUAL_COINM",
    }

    _NAMES_TO_VALUES = {
        "PERPETUAL_USDM": 1,
        "PERPETUAL_COINM": 2,
    }


class OrderType(object):
    LIMIT = 1

    _VALUES_TO_NAMES = {
        1: "LIMIT",
    }

    _NAMES_TO_VALUES = {
        "LIMIT": 1,
    }


class OrderSide(object):
    BUY = 1
    SELL = 2
    OPEN_LONG = 3
    CLOSE_LONG = 4
    OPEN_SHORT = 5
    CLOSE_SHORT = 6

    _VALUES_TO_NAMES = {
        1: "BUY",
        2: "SELL",
        3: "OPEN_LONG",
        4: "CLOSE_LONG",
        5: "OPEN_SHORT",
        6: "CLOSE_SHORT",
    }

    _NAMES_TO_VALUES = {
        "BUY": 1,
        "SELL": 2,
        "OPEN_LONG": 3,
        "CLOSE_LONG": 4,
        "OPEN_SHORT": 5,
        "CLOSE_SHORT": 6,
    }


class PositionSide(object):
    LONG = 1
    SHORT = 2

    _VALUES_TO_NAMES = {
        1: "LONG",
        2: "SHORT",
    }

    _NAMES_TO_VALUES = {
        "LONG": 1,
        "SHORT": 2,
    }


class PositionMarginMode(object):
    ISOLATED = 1
    CROSS = 2

    _VALUES_TO_NAMES = {
        1: "ISOLATED",
        2: "CROSS",
    }

    _NAMES_TO_VALUES = {
        "ISOLATED": 1,
        "CROSS": 2,
    }


class Response(object):
    """
    Attributes:
     - status
     - sequence

    """

    def __init__(
        self,
        status=None,
        sequence=None,
    ):
        self.status = status
        self.sequence = sequence

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.sequence = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("Response")
        if self.status is not None:
            oprot.writeFieldBegin("status", TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.sequence is not None:
            oprot.writeFieldBegin("sequence", TType.I64, 2)
            oprot.writeI64(self.sequence)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Currency(object):
    """
    Attributes:
     - id
     - symbol
     - scale

    """

    def __init__(
        self,
        id=None,
        symbol=None,
        scale=None,
    ):
        self.id = id
        self.symbol = symbol
        self.scale = scale

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.id = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.symbol = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.scale = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("Currency")
        if self.id is not None:
            oprot.writeFieldBegin("id", TType.I16, 1)
            oprot.writeI16(self.id)
            oprot.writeFieldEnd()
        if self.symbol is not None:
            oprot.writeFieldBegin("symbol", TType.STRING, 2)
            oprot.writeString(
                self.symbol.encode("utf-8") if sys.version_info[0] == 2 else self.symbol
            )
            oprot.writeFieldEnd()
        if self.scale is not None:
            oprot.writeFieldBegin("scale", TType.I32, 3)
            oprot.writeI32(self.scale)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.id is None:
            raise TProtocolException(message="Required field id is unset!")
        if self.symbol is None:
            raise TProtocolException(message="Required field symbol is unset!")
        if self.scale is None:
            raise TProtocolException(message="Required field scale is unset!")
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Asset(object):
    """
    Attributes:
     - traderId
     - marketType
     - currencyId
     - balance

    """

    def __init__(
        self,
        traderId=None,
        marketType=None,
        currencyId=None,
        balance=None,
    ):
        self.traderId = traderId
        self.marketType = marketType
        self.currencyId = currencyId
        self.balance = balance

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.traderId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.marketType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.currencyId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.balance = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("Asset")
        if self.traderId is not None:
            oprot.writeFieldBegin("traderId", TType.I64, 1)
            oprot.writeI64(self.traderId)
            oprot.writeFieldEnd()
        if self.marketType is not None:
            oprot.writeFieldBegin("marketType", TType.I32, 2)
            oprot.writeI32(self.marketType)
            oprot.writeFieldEnd()
        if self.currencyId is not None:
            oprot.writeFieldBegin("currencyId", TType.I16, 3)
            oprot.writeI16(self.currencyId)
            oprot.writeFieldEnd()
        if self.balance is not None:
            oprot.writeFieldBegin("balance", TType.STRING, 4)
            oprot.writeString(
                self.balance.encode("utf-8")
                if sys.version_info[0] == 2
                else self.balance
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.traderId is None:
            raise TProtocolException(message="Required field traderId is unset!")
        if self.marketType is None:
            raise TProtocolException(message="Required field marketType is unset!")
        if self.currencyId is None:
            raise TProtocolException(message="Required field currencyId is unset!")
        if self.balance is None:
            raise TProtocolException(message="Required field balance is unset!")
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Contract(object):
    """
    Attributes:
     - id
     - name
     - marketType
     - baseCurrencyId
     - quoteCurrencyId
     - settlementCurrencyId
     - baseScale
     - quoteScale

    """

    def __init__(
        self,
        id=None,
        name=None,
        marketType=None,
        baseCurrencyId=None,
        quoteCurrencyId=None,
        settlementCurrencyId=None,
        baseScale=None,
        quoteScale=None,
    ):
        self.id = id
        self.name = name
        self.marketType = marketType
        self.baseCurrencyId = baseCurrencyId
        self.quoteCurrencyId = quoteCurrencyId
        self.settlementCurrencyId = settlementCurrencyId
        self.baseScale = baseScale
        self.quoteScale = quoteScale

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.id = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.marketType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I16:
                    self.baseCurrencyId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I16:
                    self.quoteCurrencyId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I16:
                    self.settlementCurrencyId = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.baseScale = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.quoteScale = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("Contract")
        if self.id is not None:
            oprot.writeFieldBegin("id", TType.I16, 1)
            oprot.writeI16(self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin("name", TType.STRING, 2)
            oprot.writeString(
                self.name.encode("utf-8") if sys.version_info[0] == 2 else self.name
            )
            oprot.writeFieldEnd()
        if self.marketType is not None:
            oprot.writeFieldBegin("marketType", TType.I32, 3)
            oprot.writeI32(self.marketType)
            oprot.writeFieldEnd()
        if self.baseCurrencyId is not None:
            oprot.writeFieldBegin("baseCurrencyId", TType.I16, 4)
            oprot.writeI16(self.baseCurrencyId)
            oprot.writeFieldEnd()
        if self.quoteCurrencyId is not None:
            oprot.writeFieldBegin("quoteCurrencyId", TType.I16, 5)
            oprot.writeI16(self.quoteCurrencyId)
            oprot.writeFieldEnd()
        if self.settlementCurrencyId is not None:
            oprot.writeFieldBegin("settlementCurrencyId", TType.I16, 6)
            oprot.writeI16(self.settlementCurrencyId)
            oprot.writeFieldEnd()
        if self.baseScale is not None:
            oprot.writeFieldBegin("baseScale", TType.I32, 7)
            oprot.writeI32(self.baseScale)
            oprot.writeFieldEnd()
        if self.quoteScale is not None:
            oprot.writeFieldBegin("quoteScale", TType.I32, 8)
            oprot.writeI32(self.quoteScale)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.id is None:
            raise TProtocolException(message="Required field id is unset!")
        if self.name is None:
            raise TProtocolException(message="Required field name is unset!")
        if self.marketType is None:
            raise TProtocolException(message="Required field marketType is unset!")
        if self.baseCurrencyId is None:
            raise TProtocolException(message="Required field baseCurrencyId is unset!")
        if self.quoteCurrencyId is None:
            raise TProtocolException(message="Required field quoteCurrencyId is unset!")
        if self.settlementCurrencyId is None:
            raise TProtocolException(
                message="Required field settlementCurrencyId is unset!"
            )
        if self.baseScale is None:
            raise TProtocolException(message="Required field baseScale is unset!")
        if self.quoteScale is None:
            raise TProtocolException(message="Required field quoteScale is unset!")
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Trader(object):
    """
    Attributes:
     - id
     - active
     - hedgeMode
     - usdmMultiAssetMode
     - makerFee
     - takerFee

    """

    def __init__(
        self,
        id=None,
        active=None,
        hedgeMode=None,
        usdmMultiAssetMode=None,
        makerFee=None,
        takerFee=None,
    ):
        self.id = id
        self.active = active
        self.hedgeMode = hedgeMode
        self.usdmMultiAssetMode = usdmMultiAssetMode
        self.makerFee = makerFee
        self.takerFee = takerFee

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.active = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.hedgeMode = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.usdmMultiAssetMode = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.makerFee = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.takerFee = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("Trader")
        if self.id is not None:
            oprot.writeFieldBegin("id", TType.I64, 1)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.active is not None:
            oprot.writeFieldBegin("active", TType.BOOL, 2)
            oprot.writeBool(self.active)
            oprot.writeFieldEnd()
        if self.hedgeMode is not None:
            oprot.writeFieldBegin("hedgeMode", TType.BOOL, 3)
            oprot.writeBool(self.hedgeMode)
            oprot.writeFieldEnd()
        if self.usdmMultiAssetMode is not None:
            oprot.writeFieldBegin("usdmMultiAssetMode", TType.BOOL, 4)
            oprot.writeBool(self.usdmMultiAssetMode)
            oprot.writeFieldEnd()
        if self.makerFee is not None:
            oprot.writeFieldBegin("makerFee", TType.STRING, 5)
            oprot.writeString(
                self.makerFee.encode("utf-8")
                if sys.version_info[0] == 2
                else self.makerFee
            )
            oprot.writeFieldEnd()
        if self.takerFee is not None:
            oprot.writeFieldBegin("takerFee", TType.STRING, 6)
            oprot.writeString(
                self.takerFee.encode("utf-8")
                if sys.version_info[0] == 2
                else self.takerFee
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.id is None:
            raise TProtocolException(message="Required field id is unset!")
        if self.active is None:
            raise TProtocolException(message="Required field active is unset!")
        if self.hedgeMode is None:
            raise TProtocolException(message="Required field hedgeMode is unset!")
        if self.usdmMultiAssetMode is None:
            raise TProtocolException(
                message="Required field usdmMultiAssetMode is unset!"
            )
        if self.makerFee is None:
            raise TProtocolException(message="Required field makerFee is unset!")
        if self.takerFee is None:
            raise TProtocolException(message="Required field takerFee is unset!")
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Order(object):
    """
    Attributes:
     - id
     - creationTimeMs
     - traderId
     - contractId
     - orderType
     - orderSide
     - price
     - size
     - filled

    """

    def __init__(
        self,
        id=None,
        creationTimeMs=None,
        traderId=None,
        contractId=None,
        orderType=None,
        orderSide=None,
        price=None,
        size=None,
        filled=None,
    ):
        self.id = id
        self.creationTimeMs = creationTimeMs
        self.traderId = traderId
        self.contractId = contractId
        self.orderType = orderType
        self.orderSide = orderSide
        self.price = price
        self.size = size
        self.filled = filled

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.creationTimeMs = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.traderId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.contractId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.orderType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.orderSide = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.price = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.size = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.filled = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("Order")
        if self.id is not None:
            oprot.writeFieldBegin("id", TType.I64, 1)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.creationTimeMs is not None:
            oprot.writeFieldBegin("creationTimeMs", TType.I64, 2)
            oprot.writeI64(self.creationTimeMs)
            oprot.writeFieldEnd()
        if self.traderId is not None:
            oprot.writeFieldBegin("traderId", TType.I64, 3)
            oprot.writeI64(self.traderId)
            oprot.writeFieldEnd()
        if self.contractId is not None:
            oprot.writeFieldBegin("contractId", TType.I64, 4)
            oprot.writeI64(self.contractId)
            oprot.writeFieldEnd()
        if self.orderType is not None:
            oprot.writeFieldBegin("orderType", TType.I32, 5)
            oprot.writeI32(self.orderType)
            oprot.writeFieldEnd()
        if self.orderSide is not None:
            oprot.writeFieldBegin("orderSide", TType.I32, 6)
            oprot.writeI32(self.orderSide)
            oprot.writeFieldEnd()
        if self.price is not None:
            oprot.writeFieldBegin("price", TType.STRING, 7)
            oprot.writeString(
                self.price.encode("utf-8") if sys.version_info[0] == 2 else self.price
            )
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin("size", TType.STRING, 8)
            oprot.writeString(
                self.size.encode("utf-8") if sys.version_info[0] == 2 else self.size
            )
            oprot.writeFieldEnd()
        if self.filled is not None:
            oprot.writeFieldBegin("filled", TType.STRING, 9)
            oprot.writeString(
                self.filled.encode("utf-8") if sys.version_info[0] == 2 else self.filled
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.id is None:
            raise TProtocolException(message="Required field id is unset!")
        if self.creationTimeMs is None:
            raise TProtocolException(message="Required field creationTimeMs is unset!")
        if self.traderId is None:
            raise TProtocolException(message="Required field traderId is unset!")
        if self.contractId is None:
            raise TProtocolException(message="Required field contractId is unset!")
        if self.orderType is None:
            raise TProtocolException(message="Required field orderType is unset!")
        if self.orderSide is None:
            raise TProtocolException(message="Required field orderSide is unset!")
        if self.price is None:
            raise TProtocolException(message="Required field price is unset!")
        if self.size is None:
            raise TProtocolException(message="Required field size is unset!")
        if self.filled is None:
            raise TProtocolException(message="Required field filled is unset!")
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Position(object):
    """
    Attributes:
     - id
     - traderId
     - contractId
     - positionSide
     - positionMarginMode
     - avgEntryPrice
     - size
     - margin
     - maintenanceMargin

    """

    def __init__(
        self,
        id=None,
        traderId=None,
        contractId=None,
        positionSide=None,
        positionMarginMode=None,
        avgEntryPrice=None,
        size=None,
        margin=None,
        maintenanceMargin=None,
    ):
        self.id = id
        self.traderId = traderId
        self.contractId = contractId
        self.positionSide = positionSide
        self.positionMarginMode = positionMarginMode
        self.avgEntryPrice = avgEntryPrice
        self.size = size
        self.margin = margin
        self.maintenanceMargin = maintenanceMargin

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.traderId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.contractId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.positionSide = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.positionMarginMode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.avgEntryPrice = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.size = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.margin = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.maintenanceMargin = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(
                oprot._fast_encode(self, [self.__class__, self.thrift_spec])
            )
            return
        oprot.writeStructBegin("Position")
        if self.id is not None:
            oprot.writeFieldBegin("id", TType.I64, 1)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.traderId is not None:
            oprot.writeFieldBegin("traderId", TType.I64, 3)
            oprot.writeI64(self.traderId)
            oprot.writeFieldEnd()
        if self.contractId is not None:
            oprot.writeFieldBegin("contractId", TType.I64, 4)
            oprot.writeI64(self.contractId)
            oprot.writeFieldEnd()
        if self.positionSide is not None:
            oprot.writeFieldBegin("positionSide", TType.I32, 5)
            oprot.writeI32(self.positionSide)
            oprot.writeFieldEnd()
        if self.positionMarginMode is not None:
            oprot.writeFieldBegin("positionMarginMode", TType.I32, 6)
            oprot.writeI32(self.positionMarginMode)
            oprot.writeFieldEnd()
        if self.avgEntryPrice is not None:
            oprot.writeFieldBegin("avgEntryPrice", TType.STRING, 7)
            oprot.writeString(
                self.avgEntryPrice.encode("utf-8")
                if sys.version_info[0] == 2
                else self.avgEntryPrice
            )
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin("size", TType.STRING, 8)
            oprot.writeString(
                self.size.encode("utf-8") if sys.version_info[0] == 2 else self.size
            )
            oprot.writeFieldEnd()
        if self.margin is not None:
            oprot.writeFieldBegin("margin", TType.STRING, 9)
            oprot.writeString(
                self.margin.encode("utf-8") if sys.version_info[0] == 2 else self.margin
            )
            oprot.writeFieldEnd()
        if self.maintenanceMargin is not None:
            oprot.writeFieldBegin("maintenanceMargin", TType.STRING, 10)
            oprot.writeString(
                self.maintenanceMargin.encode("utf-8")
                if sys.version_info[0] == 2
                else self.maintenanceMargin
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.id is None:
            raise TProtocolException(message="Required field id is unset!")
        if self.traderId is None:
            raise TProtocolException(message="Required field traderId is unset!")
        if self.contractId is None:
            raise TProtocolException(message="Required field contractId is unset!")
        if self.positionSide is None:
            raise TProtocolException(message="Required field positionSide is unset!")
        if self.positionMarginMode is None:
            raise TProtocolException(
                message="Required field positionMarginMode is unset!"
            )
        if self.avgEntryPrice is None:
            raise TProtocolException(message="Required field avgEntryPrice is unset!")
        if self.size is None:
            raise TProtocolException(message="Required field size is unset!")
        if self.margin is None:
            raise TProtocolException(message="Required field margin is unset!")
        if self.maintenanceMargin is None:
            raise TProtocolException(
                message="Required field maintenanceMargin is unset!"
            )
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


all_structs.append(Response)
Response.thrift_spec = (
    None,  # 0
    (
        1,
        TType.I32,
        "status",
        None,
        None,
    ),  # 1
    (
        2,
        TType.I64,
        "sequence",
        None,
        None,
    ),  # 2
)
all_structs.append(Currency)
Currency.thrift_spec = (
    None,  # 0
    (
        1,
        TType.I16,
        "id",
        None,
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "symbol",
        "UTF8",
        None,
    ),  # 2
    (
        3,
        TType.I32,
        "scale",
        None,
        None,
    ),  # 3
)
all_structs.append(Asset)
Asset.thrift_spec = (
    None,  # 0
    (
        1,
        TType.I64,
        "traderId",
        None,
        None,
    ),  # 1
    (
        2,
        TType.I32,
        "marketType",
        None,
        None,
    ),  # 2
    (
        3,
        TType.I16,
        "currencyId",
        None,
        None,
    ),  # 3
    (
        4,
        TType.STRING,
        "balance",
        "UTF8",
        None,
    ),  # 4
)
all_structs.append(Contract)
Contract.thrift_spec = (
    None,  # 0
    (
        1,
        TType.I16,
        "id",
        None,
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "name",
        "UTF8",
        None,
    ),  # 2
    (
        3,
        TType.I32,
        "marketType",
        None,
        None,
    ),  # 3
    (
        4,
        TType.I16,
        "baseCurrencyId",
        None,
        None,
    ),  # 4
    (
        5,
        TType.I16,
        "quoteCurrencyId",
        None,
        None,
    ),  # 5
    (
        6,
        TType.I16,
        "settlementCurrencyId",
        None,
        None,
    ),  # 6
    (
        7,
        TType.I32,
        "baseScale",
        None,
        None,
    ),  # 7
    (
        8,
        TType.I32,
        "quoteScale",
        None,
        None,
    ),  # 8
)
all_structs.append(Trader)
Trader.thrift_spec = (
    None,  # 0
    (
        1,
        TType.I64,
        "id",
        None,
        None,
    ),  # 1
    (
        2,
        TType.BOOL,
        "active",
        None,
        None,
    ),  # 2
    (
        3,
        TType.BOOL,
        "hedgeMode",
        None,
        None,
    ),  # 3
    (
        4,
        TType.BOOL,
        "usdmMultiAssetMode",
        None,
        None,
    ),  # 4
    (
        5,
        TType.STRING,
        "makerFee",
        "UTF8",
        None,
    ),  # 5
    (
        6,
        TType.STRING,
        "takerFee",
        "UTF8",
        None,
    ),  # 6
)
all_structs.append(Order)
Order.thrift_spec = (
    None,  # 0
    (
        1,
        TType.I64,
        "id",
        None,
        None,
    ),  # 1
    (
        2,
        TType.I64,
        "creationTimeMs",
        None,
        None,
    ),  # 2
    (
        3,
        TType.I64,
        "traderId",
        None,
        None,
    ),  # 3
    (
        4,
        TType.I64,
        "contractId",
        None,
        None,
    ),  # 4
    (
        5,
        TType.I32,
        "orderType",
        None,
        None,
    ),  # 5
    (
        6,
        TType.I32,
        "orderSide",
        None,
        None,
    ),  # 6
    (
        7,
        TType.STRING,
        "price",
        "UTF8",
        None,
    ),  # 7
    (
        8,
        TType.STRING,
        "size",
        "UTF8",
        None,
    ),  # 8
    (
        9,
        TType.STRING,
        "filled",
        "UTF8",
        None,
    ),  # 9
)
all_structs.append(Position)
Position.thrift_spec = (
    None,  # 0
    (
        1,
        TType.I64,
        "id",
        None,
        None,
    ),  # 1
    None,  # 2
    (
        3,
        TType.I64,
        "traderId",
        None,
        None,
    ),  # 3
    (
        4,
        TType.I64,
        "contractId",
        None,
        None,
    ),  # 4
    (
        5,
        TType.I32,
        "positionSide",
        None,
        None,
    ),  # 5
    (
        6,
        TType.I32,
        "positionMarginMode",
        None,
        None,
    ),  # 6
    (
        7,
        TType.STRING,
        "avgEntryPrice",
        "UTF8",
        None,
    ),  # 7
    (
        8,
        TType.STRING,
        "size",
        "UTF8",
        None,
    ),  # 8
    (
        9,
        TType.STRING,
        "margin",
        "UTF8",
        None,
    ),  # 9
    (
        10,
        TType.STRING,
        "maintenanceMargin",
        "UTF8",
        None,
    ),  # 10
)
fix_spec(all_structs)
del all_structs
